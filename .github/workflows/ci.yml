name: CI - Tests & Code Quality

on:
  push:
    branches: [master, main, develop]
  pull_request:
    branches: [master, main, develop]

jobs:
  backend-tests:
    name: Backend - PHPStan, Pint & Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: cardflow_test
          POSTGRES_USER: cardflow
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: pdo, pdo_pgsql, redis, mbstring, xml, curl
          coverage: xdebug
          tools: composer:v2
      
      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: backend/vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
      
      - name: Install Composer dependencies
        working-directory: ./backend
        run: composer install --prefer-dist --no-progress --no-interaction
      
      - name: Copy .env file
        working-directory: ./backend
        run: cp .env.example .env
      
      - name: Generate application key
        working-directory: ./backend
        run: php artisan key:generate
      
      - name: Set environment variables
        working-directory: ./backend
        run: |
          echo "DB_CONNECTION=pgsql" >> .env
          echo "DB_HOST=localhost" >> .env
          echo "DB_PORT=5432" >> .env
          echo "DB_DATABASE=cardflow_test" >> .env
          echo "DB_USERNAME=cardflow" >> .env
          echo "DB_PASSWORD=test_password" >> .env
          echo "REDIS_HOST=localhost" >> .env
          echo "REDIS_PORT=6379" >> .env
      
      - name: Run migrations
        working-directory: ./backend
        run: php artisan migrate --force
      
      - name: Run PHPStan (Level 6)
        working-directory: ./backend
        run: vendor/bin/phpstan analyse --memory-limit=512M --error-format=github
      
      - name: Run Laravel Pint (Code Style Check)
        working-directory: ./backend
        run: vendor/bin/pint --test
      
      - name: Run PHPUnit tests
        working-directory: ./backend
        run: vendor/bin/phpunit --coverage-text --coverage-clover=coverage.xml
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: success()
        with:
          files: ./backend/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  frontend-tests:
    name: Frontend - ESLint, TypeScript & Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run TypeScript compiler check
        working-directory: ./frontend
        run: npx tsc --noEmit
      
      - name: Run ESLint
        working-directory: ./frontend
        run: npm run lint
        continue-on-error: true
      
      - name: Run tests (if available)
        working-directory: ./frontend
        run: |
          if grep -q '"test":' package.json; then
            npm test
          else
            echo "No tests configured"
          fi
        continue-on-error: true
      
      - name: Build production bundle
        working-directory: ./frontend
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost/api
          NEXT_PUBLIC_VOICE_API_URL: http://localhost:3001

  security-audit:
    name: Security - Dependency Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: composer:v2
      
      - name: Composer Audit
        working-directory: ./backend
        run: composer audit --no-dev
        continue-on-error: true
      
      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '20'
      
      - name: NPM Audit
        working-directory: ./frontend
        run: npm audit --production
        continue-on-error: true

  docker-build:
    name: Docker - Build & Validate
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: cardflow-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: cardflow-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Verify Docker Compose configuration
        run: docker-compose config > /dev/null

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-audit, docker-build]
    if: always()
    
    steps:
      - name: Check results
        run: |
          echo "Backend Tests: ${{ needs.backend-tests.result }}"
          echo "Frontend Tests: ${{ needs.frontend-tests.result }}"
          echo "Security Audit: ${{ needs.security-audit.result }}"
          echo "Docker Build: ${{ needs.docker-build.result }}"
          
          if [ "${{ needs.backend-tests.result }}" != "success" ]; then
            echo "❌ Backend tests failed"
            exit 1
          fi
          
          if [ "${{ needs.docker-build.result }}" != "success" ]; then
            echo "❌ Docker build failed"
            exit 1
          fi
          
          echo "✅ All critical checks passed!"
