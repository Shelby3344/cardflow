services:
  # ============================================
  # PostgreSQL Database
  # ============================================
  postgres:
    image: postgres:16-alpine
    container_name: cardflow-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: cardflow
      POSTGRES_USER: cardflow
      POSTGRES_PASSWORD: ${DB_PASSWORD:-cardflow_secure_pass_2024}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - cardflow-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cardflow -d cardflow"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================
  # Redis Cache & Queue
  # ============================================
  redis:
    image: redis:7-alpine
    container_name: cardflow-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - cardflow-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================
  # Backend Laravel API
  # ============================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cardflow-backend
    restart: unless-stopped
    working_dir: /var/www
    environment:
      APP_NAME: CardFlow
      APP_ENV: ${APP_ENV:-production}
      APP_KEY: ${APP_KEY}
      APP_DEBUG: ${APP_DEBUG:-false}
      APP_URL: ${APP_URL:-http://localhost}
      
      DB_CONNECTION: pgsql
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: cardflow
      DB_USERNAME: cardflow
      DB_PASSWORD: ${DB_PASSWORD:-cardflow_secure_pass_2024}
      
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      REDIS_PORT: 6379
      
      CACHE_STORE: redis
      SESSION_DRIVER: redis
      QUEUE_CONNECTION: redis
      
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      SANCTUM_STATEFUL_DOMAINS: ${SANCTUM_STATEFUL_DOMAINS:-localhost,localhost:3000}
      
      VOICE_IA_URL: http://voice-ia:3001
      
      STRIPE_KEY: ${STRIPE_KEY}
      STRIPE_SECRET: ${STRIPE_SECRET}
      
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION:-us-east-1}
      AWS_BUCKET: ${AWS_BUCKET:-}
    volumes:
      - ./backend/.env:/var/www/.env:ro
      - ./backend/storage:/var/www/storage
      - ./backend/bootstrap/cache:/var/www/bootstrap/cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cardflow-network
    healthcheck:
      test: ["CMD", "php", "artisan", "inspire"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ============================================
  # Queue Worker (Laravel)
  # ============================================
  queue-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cardflow-queue-worker
    restart: unless-stopped
    working_dir: /var/www
    command: php artisan queue:work redis --tries=3 --timeout=90
    environment:
      APP_NAME: CardFlow
      APP_ENV: ${APP_ENV:-production}
      APP_KEY: ${APP_KEY}
      APP_DEBUG: ${APP_DEBUG:-false}
      
      DB_CONNECTION: pgsql
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: cardflow
      DB_USERNAME: cardflow
      DB_PASSWORD: ${DB_PASSWORD:-cardflow_secure_pass_2024}
      
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      REDIS_PORT: 6379
      
      CACHE_STORE: redis
      QUEUE_CONNECTION: redis
    volumes:
      - ./backend/.env:/var/www/.env:ro
      - ./backend/storage:/var/www/storage
    depends_on:
      - backend
      - redis
    networks:
      - cardflow-network

  # ============================================
  # Voice IA Service
  # ============================================
  voice-ia:
    build:
      context: ./voice-ia-service
      dockerfile: Dockerfile
    container_name: cardflow-voice-ia
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3001
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ELEVENLABS_API_KEY: ${ELEVENLABS_API_KEY}
    ports:
      - "3001:3001"
    networks:
      - cardflow-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # ============================================
  # Nginx Web Server
  # ============================================
  nginx:
    image: nginx:alpine
    container_name: cardflow-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./deploy/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./backend/public:/var/www/public:ro
      - ./deploy/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - voice-ia
    networks:
      - cardflow-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================
  # Frontend Next.js
  # ============================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost}
        NEXT_PUBLIC_VOICE_API_URL: ${NEXT_PUBLIC_VOICE_API_URL:-http://localhost/voice-api}
    container_name: cardflow-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost}
      NEXT_PUBLIC_VOICE_API_URL: ${NEXT_PUBLIC_VOICE_API_URL:-http://localhost/voice-api}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-}
      APPLE_CLIENT_ID: ${APPLE_CLIENT_ID:-}
      APPLE_CLIENT_SECRET: ${APPLE_CLIENT_SECRET:-}
    volumes:
      - ./frontend/.env:/app/.env:ro
    ports:
      - "3000:3000"
    depends_on:
      - nginx
    networks:
      - cardflow-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# ============================================
# Networks
# ============================================
networks:
  cardflow-network:
    driver: bridge
    name: cardflow-network

# ============================================
# Volumes
# ============================================
volumes:
  postgres_data:
    driver: local
    name: cardflow-postgres-data
  redis_data:
    driver: local
    name: cardflow-redis-data
