# ============================================
# CardFlow - Makefile para Docker Compose
# ============================================

.PHONY: help build up down restart logs ps clean migrate seed cache test shell db-shell redis-shell health install

# Vari√°veis
COMPOSE = docker-compose
BACKEND = backend
FRONTEND = frontend
VOICE = voice-ia

# Cores para output
BLUE = \033[0;34m
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
NC = \033[0m # No Color

## help: Mostra esta mensagem de ajuda
help:
	@echo "$(BLUE)CardFlow - Comandos Docker$(NC)"
	@echo ""
	@echo "$(GREEN)Comandos dispon√≠veis:$(NC)"
	@echo "  $(YELLOW)make install$(NC)      - Instala e configura o projeto pela primeira vez"
	@echo "  $(YELLOW)make build$(NC)        - Constr√≥i todas as imagens Docker"
	@echo "  $(YELLOW)make up$(NC)           - Inicia todos os servi√ßos"
	@echo "  $(YELLOW)make down$(NC)         - Para todos os servi√ßos"
	@echo "  $(YELLOW)make restart$(NC)      - Reinicia todos os servi√ßos"
	@echo "  $(YELLOW)make logs$(NC)         - Mostra logs de todos os servi√ßos"
	@echo "  $(YELLOW)make ps$(NC)           - Lista status dos containers"
	@echo "  $(YELLOW)make clean$(NC)        - Remove containers, volumes e imagens"
	@echo ""
	@echo "$(GREEN)Backend (Laravel):$(NC)"
	@echo "  $(YELLOW)make migrate$(NC)      - Executa migra√ß√µes do banco"
	@echo "  $(YELLOW)make seed$(NC)         - Executa seeders"
	@echo "  $(YELLOW)make cache$(NC)        - Limpa e reconstr√≥i cache"
	@echo "  $(YELLOW)make test$(NC)         - Executa testes"
	@echo "  $(YELLOW)make shell$(NC)        - Acessa shell do backend"
	@echo ""
	@echo "$(GREEN)Banco de Dados:$(NC)"
	@echo "  $(YELLOW)make db-shell$(NC)     - Acessa PostgreSQL"
	@echo "  $(YELLOW)make db-backup$(NC)    - Faz backup do banco"
	@echo "  $(YELLOW)make db-restore$(NC)   - Restaura backup do banco"
	@echo "  $(YELLOW)make redis-shell$(NC)  - Acessa Redis CLI"
	@echo ""
	@echo "$(GREEN)Monitoramento:$(NC)"
	@echo "  $(YELLOW)make health$(NC)       - Verifica sa√∫de dos servi√ßos"
	@echo "  $(YELLOW)make stats$(NC)        - Mostra uso de recursos"
	@echo ""

## install: Configura√ß√£o inicial completa
install:
	@echo "$(BLUE)üöÄ Instalando CardFlow...$(NC)"
	@if [ ! -f .env.docker ]; then \
		echo "$(YELLOW)üìù Copiando .env.docker.example para .env.docker$(NC)"; \
		cp .env.docker.example .env.docker; \
		echo "$(RED)‚ö†Ô∏è  Configure o arquivo .env.docker antes de continuar!$(NC)"; \
		exit 1; \
	fi
	@echo "$(BLUE)üèóÔ∏è  Construindo imagens...$(NC)"
	@$(COMPOSE) build
	@echo "$(BLUE)üöÄ Iniciando servi√ßos de infraestrutura...$(NC)"
	@$(COMPOSE) up -d postgres redis
	@echo "$(BLUE)‚è≥ Aguardando PostgreSQL e Redis...$(NC)"
	@sleep 15
	@echo "$(BLUE)üìä Executando migra√ß√µes...$(NC)"
	@$(COMPOSE) run --rm $(BACKEND) php artisan migrate --force
	@echo "$(BLUE)üå± Executando seeders...$(NC)"
	@$(COMPOSE) run --rm $(BACKEND) php artisan db:seed --force || true
	@echo "$(BLUE)üßπ Otimizando aplica√ß√£o...$(NC)"
	@$(COMPOSE) run --rm $(BACKEND) php artisan config:cache
	@$(COMPOSE) run --rm $(BACKEND) php artisan route:cache
	@$(COMPOSE) run --rm $(BACKEND) php artisan view:cache
	@echo "$(BLUE)üöÄ Iniciando todos os servi√ßos...$(NC)"
	@$(COMPOSE) up -d
	@echo "$(GREEN)‚úÖ CardFlow instalado com sucesso!$(NC)"
	@echo ""
	@$(MAKE) health

## build: Constr√≥i todas as imagens
build:
	@echo "$(BLUE)üèóÔ∏è  Construindo imagens Docker...$(NC)"
	@$(COMPOSE) build

## up: Inicia todos os servi√ßos
up:
	@echo "$(BLUE)üöÄ Iniciando servi√ßos...$(NC)"
	@$(COMPOSE) up -d
	@echo "$(GREEN)‚úÖ Servi√ßos iniciados!$(NC)"

## down: Para todos os servi√ßos
down:
	@echo "$(YELLOW)üõë Parando servi√ßos...$(NC)"
	@$(COMPOSE) down
	@echo "$(GREEN)‚úÖ Servi√ßos parados!$(NC)"

## restart: Reinicia todos os servi√ßos
restart: down up

## logs: Mostra logs de todos os servi√ßos
logs:
	@$(COMPOSE) logs -f

## logs-backend: Logs do backend
logs-backend:
	@$(COMPOSE) logs -f $(BACKEND)

## logs-frontend: Logs do frontend
logs-frontend:
	@$(COMPOSE) logs -f $(FRONTEND)

## ps: Lista status dos containers
ps:
	@$(COMPOSE) ps

## clean: Remove tudo (CUIDADO!)
clean:
	@echo "$(RED)‚ö†Ô∏è  Removendo containers, volumes e imagens...$(NC)"
	@$(COMPOSE) down -v --rmi all
	@echo "$(GREEN)‚úÖ Limpeza conclu√≠da!$(NC)"

## migrate: Executa migra√ß√µes
migrate:
	@echo "$(BLUE)üìä Executando migra√ß√µes...$(NC)"
	@$(COMPOSE) exec $(BACKEND) php artisan migrate --force
	@echo "$(GREEN)‚úÖ Migra√ß√µes executadas!$(NC)"

## migrate-fresh: Reseta banco e executa migra√ß√µes
migrate-fresh:
	@echo "$(RED)‚ö†Ô∏è  Resetando banco de dados...$(NC)"
	@$(COMPOSE) exec $(BACKEND) php artisan migrate:fresh --force
	@echo "$(GREEN)‚úÖ Banco resetado!$(NC)"

## seed: Executa seeders
seed:
	@echo "$(BLUE)üå± Executando seeders...$(NC)"
	@$(COMPOSE) exec $(BACKEND) php artisan db:seed --force
	@echo "$(GREEN)‚úÖ Seeders executados!$(NC)"

## cache: Limpa e reconstr√≥i cache
cache:
	@echo "$(BLUE)üßπ Limpando cache...$(NC)"
	@$(COMPOSE) exec $(BACKEND) php artisan cache:clear
	@$(COMPOSE) exec $(BACKEND) php artisan config:clear
	@$(COMPOSE) exec $(BACKEND) php artisan route:clear
	@$(COMPOSE) exec $(BACKEND) php artisan view:clear
	@echo "$(BLUE)üèóÔ∏è  Reconstruindo cache...$(NC)"
	@$(COMPOSE) exec $(BACKEND) php artisan config:cache
	@$(COMPOSE) exec $(BACKEND) php artisan route:cache
	@$(COMPOSE) exec $(BACKEND) php artisan view:cache
	@echo "$(GREEN)‚úÖ Cache atualizado!$(NC)"

## test: Executa testes
test:
	@echo "$(BLUE)üß™ Executando testes...$(NC)"
	@$(COMPOSE) exec $(BACKEND) php artisan test

## shell: Acessa shell do backend
shell:
	@$(COMPOSE) exec $(BACKEND) sh

## db-shell: Acessa PostgreSQL
db-shell:
	@$(COMPOSE) exec postgres psql -U cardflow -d cardflow

## db-backup: Backup do banco
db-backup:
	@echo "$(BLUE)üíæ Fazendo backup do banco...$(NC)"
	@$(COMPOSE) exec postgres pg_dump -U cardflow cardflow > backup_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "$(GREEN)‚úÖ Backup criado!$(NC)"

## db-restore: Restaura backup (usar: make db-restore FILE=backup.sql)
db-restore:
	@if [ -z "$(FILE)" ]; then \
		echo "$(RED)‚ùå Use: make db-restore FILE=backup.sql$(NC)"; \
		exit 1; \
	fi
	@echo "$(BLUE)üì• Restaurando backup...$(NC)"
	@$(COMPOSE) exec -T postgres psql -U cardflow cardflow < $(FILE)
	@echo "$(GREEN)‚úÖ Backup restaurado!$(NC)"

## redis-shell: Acessa Redis CLI
redis-shell:
	@$(COMPOSE) exec redis redis-cli

## health: Verifica sa√∫de dos servi√ßos
health:
	@echo "$(BLUE)üè• Verificando sa√∫de dos servi√ßos...$(NC)"
	@echo ""
	@$(COMPOSE) ps
	@echo ""
	@echo "$(GREEN)üìç URLs de acesso:$(NC)"
	@echo "   üåê Frontend:     http://localhost:3000"
	@echo "   üîß Backend API:  http://localhost/api"
	@echo "   üéôÔ∏è  Voice IA:    http://localhost/voice-api"
	@echo "   üìä API Docs:     http://localhost/api/documentation"
	@echo ""

## stats: Mostra uso de recursos
stats:
	@docker stats --no-stream

## update: Atualiza aplica√ß√£o
update:
	@echo "$(BLUE)üîÑ Atualizando aplica√ß√£o...$(NC)"
	@git pull
	@$(COMPOSE) build
	@$(COMPOSE) up -d
	@$(COMPOSE) exec $(BACKEND) php artisan migrate --force
	@$(MAKE) cache
	@echo "$(GREEN)‚úÖ Aplica√ß√£o atualizada!$(NC)"
